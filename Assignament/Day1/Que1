#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <iomanip>
using namespace std;

class InventoryItem {
private:
    string itemID;
    string name;
    string category;
    int quantity;
    int reorderLevel;

public:
    InventoryItem(string id, string n, string cat, int qty, int reorder)
        : itemID(id), name(n), category(cat), quantity(qty), reorderLevel(reorder) {}

    string getItemID() const { return itemID; }
    string getName() const { return name; }
    string getCategory() const { return category; }
    int getQuantity() const { return quantity; }
    int getReorderLevel() const { return reorderLevel; }

    void updateQuantity(int qty) { quantity += qty; }

    bool needsReorder() const { return quantity < reorderLevel; }

    void displayItem() const {
        cout << left << setw(10) << itemID
             << setw(20) << name
             << setw(15) << category
             << setw(10) << quantity
             << setw(15) << reorderLevel << endl;
    }

    string toCSV() const {
        return itemID + "," + name + "," + category + "," + to_string(quantity) + "," + to_string(reorderLevel);
    }
};

class InventoryManagementSystem {
private:
    vector<InventoryItem> inventory;

    InventoryItem* findItemByID(const string& id) {
        for (auto& item : inventory) {
            if (item.getItemID() == id)
                return &item;
        }
        return nullptr;
    }

public:
    void addItem() {
        string id, name, category;
        int quantity, reorderLevel;

        cout << "Enter Item ID: ";
        cin >> id;
        cout << "Enter Name: ";
        cin.ignore();
        getline(cin, name);
        cout << "Enter Category: ";
        getline(cin, category);
        cout << "Enter Quantity: ";
        cin >> quantity;
        cout << "Enter Reorder Level: ";
        cin >> reorderLevel;

        inventory.emplace_back(id, name, category, quantity, reorderLevel);
        cout << "Item added successfully!\n";
    }

    void updateStock() {
        string id;
        int quantity;

        cout << "Enter Item ID to update: ";
        cin >> id;

        InventoryItem* item = findItemByID(id);
        if (item) {
            cout << "Enter Quantity to add/remove (use negative to remove): ";
            cin >> quantity;
            item->updateQuantity(quantity);
            cout << "Stock updated successfully!\n";
        } else {
            cout << "Item not found!\n";
        }
    }

    void displayInventory() const {
        cout << left << setw(10) << "Item ID"
             << setw(20) << "Name"
             << setw(15) << "Category"
             << setw(10) << "Quantity"
             << setw(15) << "Reorder Level" << endl;
        cout << string(70, '-') << endl;

        for (const auto& item : inventory) {
            item.displayItem();
            if (item.needsReorder()) {
                cout << "  -> Alert: Needs Reorder!\n";
            }
        }
    }

    void searchItem() const {
        string query;
        cout << "Enter Name or Category to search: ";
        cin.ignore();
        getline(cin, query);

        cout << left << setw(10) << "Item ID"
             << setw(20) << "Name"
             << setw(15) << "Category"
             << setw(10) << "Quantity"
             << setw(15) << "Reorder Level" << endl;
        cout << string(70, '-') << endl;

        for (const auto& item : inventory) {
            if (item.getName() == query || item.getCategory() == query) {
                item.displayItem();
            }
        }
    }

    void exportInventory() const {
        ofstream file("inventory_report.csv");
        if (file.is_open()) {
            file << "Item ID,Name,Category,Quantity,Reorder Level\n";
            for (const auto& item : inventory) {
                file << item.toCSV() << "\n";
            }
            file.close();
            cout << "Inventory exported to inventory_report.csv successfully!\n";
        } else {
            cout << "Error: Unable to open file for writing!\n";
        }
    }
};

int main() {
    InventoryManagementSystem ims;
    int choice;

    do {
        cout << "\nWarehouse Inventory Management System\n";
        cout << "1. Add New Item\n";
        cout << "2. Update Stock\n";
        cout << "3. View Inventory\n";
        cout << "4. Search Item\n";
        cout << "5. Export Inventory\n";
        cout << "6. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                ims.addItem();
                break;
            case 2:
                ims.updateStock();
                break;
            case 3:
                ims.displayInventory();
                break;
            case 4:
                ims.searchItem();
                break;
            case 5:
                ims.exportInventory();
                break;
            case 6:
                cout << "Exiting the program. Goodbye!\n";
                break;
            default:
                cout << "Invalid choice! Please try again.\n";
        }
    } while (choice != 6);

    return 0;
}





Output:
Warehouse Inventory Management System
1. Add New Item
2. Update Stock
3. View Inventory
4. Search Item
5. Export Inventory
6. Exit
Enter your choice: 1
Enter Item ID: 101
Enter Name: apple
Enter Category: groceries
Enter Quantity: 50
Enter Reorder Level: 35
Item added successfully!

Warehouse Inventory Management System
1. Add New Item
2. Update Stock
3. View Inventory
4. Search Item
5. Export Inventory
6. Exit
Enter your choice: 3
Item ID   Name                Category       Quantity  Reorder Level  
----------------------------------------------------------------------
101       apple               groceries      50        35             

Warehouse Inventory Management System
1. Add New Item
2. Update Stock
3. View Inventory
4. Search Item
5. Export Inventory
6. Exit
Enter your choice: 
