#include <iostream>
#include <string>
#include <thread>
#include <chrono>

struct Task {
    int taskID;
    int priority;
    int executionTime;
    Task* next;

    Task(int id, int prio, int execTime) : taskID(id), priority(prio), executionTime(execTime), next(nullptr) {}
};

class TaskScheduler {
private:
    Task* head;

public:
    TaskScheduler() : head(nullptr) {}

    void addTask(int taskID, int priority, int executionTime) {
        Task* newTask = new Task(taskID, priority, executionTime);

        if (!head || head->priority < priority) {
            newTask->next = head;
            head = newTask;
        } else {
            Task* current = head;
            while (current->next && current->next->priority >= priority) {
                current = current->next;
            }
            newTask->next = current->next;
            current->next = newTask;
        }

        std::cout << "Added Task ID: " << taskID << " with Priority: " << priority << " and Execution Time: " << executionTime << " seconds." << std::endl;
    }

    void completeTask() {
        if (!head) {
            std::cout << "No tasks to complete." << std::endl;
            return;
        }

        Task* toDelete = head;
        std::cout << "Completing Task ID: " << head->taskID << " with Priority: " << head->priority << std::endl;
        head = head->next;
        delete toDelete;
    }

    void displayTasks() {
        if (!head) {
            std::cout << "No tasks in the scheduler." << std::endl;
            return;
        }

        std::cout << "Current Task List: " << std::endl;
        Task* current = head;
        while (current) {
            std::cout << "Task ID: " << current->taskID << ", Priority: " << current->priority
                      << ", Execution Time: " << current->executionTime << " seconds." << std::endl;
            current = current->next;
        }
    }

    void executeTasks() {
        while (head) {
            displayTasks();
            std::cout << "Executing Task ID: " << head->taskID << " with Priority: " << head->priority << "..." << std::endl;
            std::this_thread::sleep_for(std::chrono::seconds(head->executionTime));
            completeTask();
        }
        std::cout << "All tasks completed." << std::endl;
    }

    ~TaskScheduler() {
        while (head) {
            Task* toDelete = head;
            head = head->next;
            delete toDelete;
        }
    }
};

int main() {
    TaskScheduler scheduler;

    scheduler.addTask(1, 5, 2);
    scheduler.addTask(2, 3, 1);
    scheduler.addTask(3, 8, 3);
    scheduler.addTask(4, 5, 1);

    scheduler.executeTasks();

    return 0;
}
